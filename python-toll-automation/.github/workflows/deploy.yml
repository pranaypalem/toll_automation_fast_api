name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: toll-automation
  LAMBDA_FUNCTION_NAME: toll-automation-container

jobs:
  # CI Stage: Code Quality & Testing
  ci:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Code formatting check (Black)
      run: |
        black --check --diff app/ tests/
        echo "✅ Black formatting check passed"

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff app/ tests/
        echo "✅ isort check passed"

    - name: Linting (flake8)
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        echo "✅ Flake8 linting passed"

    - name: Type checking (mypy)
      run: |
        mypy app/ --ignore-missing-imports
        echo "✅ MyPy type checking passed"

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
        echo "✅ All tests passed"

    - name: Security check (Bandit)
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
        echo "✅ Security scan completed"

  # CD Stage: Build & Deploy (only on main/master push)
  deploy:
    name: Build & Deploy to AWS
    runs-on: ubuntu-latest
    needs: ci  # Only run after CI passes
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Create or update Lambda execution role
      run: |
        # Create execution role if it doesn't exist
        aws iam get-role --role-name lambda-container-execution-role --region $AWS_REGION || \
        aws iam create-role --role-name lambda-container-execution-role \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {"Service": "lambda.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }
            ]
          }'
        
        # Attach basic execution policy
        aws iam attach-role-policy \
          --role-name lambda-container-execution-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true

    - name: Create or update Lambda function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Wait for role propagation
        sleep 15
        
        # Get AWS account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Check if Lambda function exists
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_REGION >/dev/null 2>&1; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --region $AWS_REGION
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role arn:aws:iam::$AWS_ACCOUNT_ID:role/lambda-container-execution-role \
            --timeout 300 \
            --memory-size 1024 \
            --region $AWS_REGION
        fi

    - name: Create or update API Gateway
      run: |
        # Get AWS account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Check if API exists
        API_ID=$(aws apigatewayv2 get-apis --region $AWS_REGION --query 'Items[?Name==`toll-automation-container-api`].ApiId' --output text)
        
        if [ -z "$API_ID" ] || [ "$API_ID" == "None" ]; then
          echo "Creating new API Gateway..."
          API_ID=$(aws apigatewayv2 create-api \
            --name toll-automation-container-api \
            --protocol-type HTTP \
            --target arn:aws:lambda:$AWS_REGION:$AWS_ACCOUNT_ID:function:$LAMBDA_FUNCTION_NAME \
            --region $AWS_REGION \
            --query 'ApiId' --output text)
        else
          echo "API Gateway already exists: $API_ID"
        fi
        
        # Grant API Gateway permission to invoke Lambda
        aws lambda add-permission \
          --function-name $LAMBDA_FUNCTION_NAME \
          --statement-id apigateway-invoke-container-${{ github.sha }} \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:$AWS_REGION:$AWS_ACCOUNT_ID:$API_ID/*/*" \
          --region $AWS_REGION || echo "Permission may already exist"
        
        echo "Deployment complete!"
        echo "API URL: https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/"